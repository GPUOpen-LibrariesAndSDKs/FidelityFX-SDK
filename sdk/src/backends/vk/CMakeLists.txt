# This file is part of the FidelityFX SDK.
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc. All rights reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

if(NOT ${FFX_API_VK})
    return()
endif()

# Function to compile a set of shaders using the FidelityFX shader compiler driver.
#
# EXECUTABLE			Path to the FidelityFX SC tool executable.
# BASE_ARGS				The base arguments for the compiler.
# VK_BASE_ARGS			VK specific base args.
# PERMUTATION_ARGS		Permutation set to compile for.
# SHADER_FILES			A list of shader files to compile using the permutation matrix expanded from SC_PERMUTATION_ARGS.
#
# Returns
# A list of header files generated by the FidelityFX Shader Compiler driver.
function(compile_shaders EXECUTABLE BASE_ARGS VK_BASE_ARGS PERMUTATION_ARGS INCLUDES_ARGS SHADER_FILES PERMUTATION_OUTPUTS)

	#message(STATUS ${FFX_PASS_SHADER_OUTPUT_PATH})
	#message(STATUS ${EXECUTABLE})
	#message(STATUS ${BASE_ARGS})
	#message(STATUS ${VK_BASE_ARGS})
	#message(STATUS ${PERMUTATION_ARGS})
	#message(STATUS ${INCLUDES_ARGS})
	#message(STATUS ${SHADER_FILES})

	# GLSL requires -I<include0> -I<include1> etc.
	set(COMPILE_INCLUDE_ARGS )
	foreach(INC ${INCLUDES_ARGS})
		list(APPEND COMPILE_INCLUDE_ARGS -I${INC})
	endforeach(INC)

	foreach(PASS_SHADER ${SHADER_FILES})
		get_filename_component(PASS_SHADER_FILENAME ${PASS_SHADER} NAME_WE)
		get_filename_component(PASS_SHADER_TARGET ${PASS_SHADER} NAME_WLE)
		set(WAVE32_PERMUTATION_HEADER ${FFX_PASS_SHADER_OUTPUT_PATH}/${PASS_SHADER_TARGET}_permutations.h)
		set(WAVE64_PERMUTATION_HEADER ${FFX_PASS_SHADER_OUTPUT_PATH}/${PASS_SHADER_TARGET}_wave64_permutations.h)
		set(WAVE32_16BIT_PERMUTATION_HEADER ${FFX_PASS_SHADER_OUTPUT_PATH}/${PASS_SHADER_TARGET}_16bit_permutations.h)
		set(WAVE64_16BIT_PERMUTATION_HEADER ${FFX_PASS_SHADER_OUTPUT_PATH}/${PASS_SHADER_TARGET}_wave64_16bit_permutations.h)

		# combine base and permutation args
		set(SC_ARGS ${BASE_ARGS} ${VK_BASE_ARGS} ${PERMUTATION_ARGS})

		if (USE_DEPFILE)
			# Wave32
			add_custom_command(
				OUTPUT ${WAVE32_PERMUTATION_HEADER}
				COMMAND ${EXECUTABLE} ${SC_ARGS} -name=${PASS_SHADER_FILENAME} -DFFX_HALF=0 ${COMPILE_INCLUDE_ARGS} -output=${FFX_PASS_SHADER_OUTPUT_PATH} ${PASS_SHADER}
				WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
				DEPENDS ${PASS_SHADER}
				DEPFILE ${WAVE32_PERMUTATION_HEADER}.d
			)
			list(APPEND PERMUTATION_OUTPUTS ${WAVE32_PERMUTATION_HEADER})

			# Wave64
			add_custom_command(
				OUTPUT ${WAVE64_PERMUTATION_HEADER}
				COMMAND ${EXECUTABLE} ${SC_ARGS} -name=${PASS_SHADER_FILENAME}_wave64 -DFFX_HALF=0 ${COMPILE_INCLUDE_ARGS} -output=${FFX_PASS_SHADER_OUTPUT_PATH} ${PASS_SHADER}
				WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
				DEPENDS ${PASS_SHADER}
				DEPFILE ${WAVE64_PERMUTATION_HEADER}.d
			)
			list(APPEND PERMUTATION_OUTPUTS ${WAVE64_PERMUTATION_HEADER})

			# Wave32 16-bit
			add_custom_command(
				OUTPUT ${WAVE32_16BIT_PERMUTATION_HEADER}
				COMMAND ${EXECUTABLE} ${SC_ARGS} -name=${PASS_SHADER_FILENAME}_16bit -DFFX_HALF=1 ${COMPILE_INCLUDE_ARGS} -output=${FFX_PASS_SHADER_OUTPUT_PATH} ${PASS_SHADER}
				WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
				DEPENDS ${PASS_SHADER}
				DEPFILE ${WAVE32_16BIT_PERMUTATION_HEADER}.d
			)
			list(APPEND PERMUTATION_OUTPUTS ${WAVE32_16BIT_PERMUTATION_HEADER})

			# Wave64 16-bit
			add_custom_command(
				OUTPUT ${WAVE64_16BIT_PERMUTATION_HEADER}
				COMMAND ${EXECUTABLE} ${SC_ARGS} -name=${PASS_SHADER_FILENAME}_wave64_16bit -DFFX_HALF=1 ${COMPILE_INCLUDE_ARGS} -output=${FFX_PASS_SHADER_OUTPUT_PATH} ${PASS_SHADER}
				WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
				DEPENDS ${PASS_SHADER}
				DEPFILE ${WAVE64_16BIT_PERMUTATION_HEADER}.d
			)
			list(APPEND PERMUTATION_OUTPUTS ${WAVE64_16BIT_PERMUTATION_HEADER})

		else()
			# Wave32
			add_custom_command(
				OUTPUT ${WAVE32_PERMUTATION_HEADER}
				COMMAND ${EXECUTABLE} ${SC_ARGS} -name=${PASS_SHADER_FILENAME} -DFFX_HALF=0 ${COMPILE_INCLUDE_ARGS} -output=${FFX_PASS_SHADER_OUTPUT_PATH} ${PASS_SHADER}
				WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
				DEPENDS ${PASS_SHADER}
			)
			list(APPEND PERMUTATION_OUTPUTS ${WAVE32_PERMUTATION_HEADER})

			# Wave64
			add_custom_command(
				OUTPUT ${WAVE64_PERMUTATION_HEADER}
				COMMAND ${EXECUTABLE} ${SC_ARGS} -name=${PASS_SHADER_FILENAME}_wave64 -DFFX_HALF=0 ${COMPILE_INCLUDE_ARGS} -output=${FFX_PASS_SHADER_OUTPUT_PATH} ${PASS_SHADER}
				WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
				DEPENDS ${PASS_SHADER}
			)
			list(APPEND PERMUTATION_OUTPUTS ${WAVE64_PERMUTATION_HEADER})

			# Wave32 16-bit
			add_custom_command(
				OUTPUT ${WAVE32_16BIT_PERMUTATION_HEADER}
				COMMAND ${EXECUTABLE} ${SC_ARGS} -name=${PASS_SHADER_FILENAME}_16bit -DFFX_HALF=1 ${COMPILE_INCLUDE_ARGS} -output=${FFX_PASS_SHADER_OUTPUT_PATH} ${PASS_SHADER}
				WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
				DEPENDS ${PASS_SHADER}
			)
			list(APPEND PERMUTATION_OUTPUTS ${WAVE32_16BIT_PERMUTATION_HEADER})

			# Wave64 16-bit
			add_custom_command(
				OUTPUT ${WAVE64_16BIT_PERMUTATION_HEADER}
				COMMAND ${EXECUTABLE} ${SC_ARGS} -name=${PASS_SHADER_FILENAME}_wave64_16bit -DFFX_HALF=1 ${COMPILE_INCLUDE_ARGS} -output=${FFX_PASS_SHADER_OUTPUT_PATH} ${PASS_SHADER}
				WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
				DEPENDS ${PASS_SHADER}
			)
			list(APPEND PERMUTATION_OUTPUTS ${WAVE64_16BIT_PERMUTATION_HEADER})

		endif()
	endforeach(PASS_SHADER)

	set(${PERMUTATION_OUTPUTS} ${PERMUTATION_OUTPUTS} PARENT_SCOPE)
endfunction()

# macro to add shader output files to a list for dependencies
macro (add_shader_output)
    foreach (_SHADER_SRC ${ARGN})
		#message (STATUS ${_SHADER_SRC})
		list (APPEND FFX_SC_PERMUTATION_OUTPUTS "${_SHADER_SRC}")
    endforeach()

	set (FFX_SC_PERMUTATION_OUTPUTS ${FFX_SC_PERMUTATION_OUTPUTS} PARENT_SCOPE)
endmacro()


# this check is temporary until we can all switch to CMAKE 3.23 that will give us the version of Vulkan directly
function (ParseVulkanHeader)

    # Check that vulkan_core.h exists
    if(NOT EXISTS "${Vulkan_INCLUDE_DIRS}/vulkan/vulkan_core.h")
        message(SEND_ERROR "Unable to find vulkan_core.h.")
        return()
    endif()
    # Fetch header version from vulkan_core.h
    file(STRINGS "${Vulkan_INCLUDE_DIRS}/vulkan/vulkan_core.h" lines REGEX "^#define VK_HEADER_VERSION_COMPLETE VK_MAKE(_API)?_VERSION\\(([0-9]+,)+")
    list(LENGTH lines len)
    if(${len} EQUAL 1)
        #message(STATUS "vulkan version in line ${lines}")
        string(REGEX MATCHALL
                    "[0-9]+"
                    vk_header_version_complete
                    ${lines})
        list(LENGTH vk_header_version_complete len)
        if(${len} GREATER_EQUAL 2)
            if(${len} EQUAL 2)
                list(GET vk_header_version_complete 0 vk_header_version_major)
                list(GET vk_header_version_complete 1 vk_header_version_minor)
            else()
                # the first one is the variant
                list(GET vk_header_version_complete 1 vk_header_version_major)
                list(GET vk_header_version_complete 2 vk_header_version_minor)
            endif()

            set(vulkan_header_version_major ${vk_header_version_major} PARENT_SCOPE)
            set(vulkan_header_version_minor ${vk_header_version_minor} PARENT_SCOPE)
        else()
            message(SEND_ERROR "Regex unable to parse the VK_HEADER_VERSION_COMPLETE. Version has ${len} numbers.")
        endif()
    elseif(${len} EQUAL 0)
        message(SEND_ERROR "Unable to find VK_HEADER_VERSION_COMPLETE from vulkan_core.h.")
    else()
        message(SEND_ERROR "Multiple VK_HEADER_VERSION_COMPLETE found in vulkan_core.h.")
    endif()

endfunction()

function (CheckVulkanSDKVersion)
    # set the desired version
    set(vulkan_min_version_major 1)
    set(vulkan_min_version_minor 3)

    # variables to be set
    set(vulkan_header_version_major 0)
    set(vulkan_header_version_minor 0)

    # find version in the header
    ParseVulkanHeader()

    # check the SDK version is enough
    if((${vulkan_header_version_major} LESS ${vulkan_min_version_major}) OR ((${vulkan_header_version_major} EQUAL ${vulkan_min_version_major}) AND (${vulkan_header_version_minor} LESS ${vulkan_min_version_minor})))
        if(NOT((${vulkan_header_version_major} EQUAL 0) OR (${vulkan_header_version_minor} EQUAL 0)))
            message(SEND_ERROR "Found Vulkan ${vulkan_header_version_major}.${vulkan_header_version_minor}.")
        endif()
        message(FATAL_ERROR "Vulkan SDK ${vulkan_min_version_major}.${vulkan_min_version_minor} or above is required.")
    endif()

endfunction()

find_package(Vulkan REQUIRED)
CheckVulkanSDKVersion()

file(GLOB PUBLIC_SHADERS
	FFX_PUBLIC_SHADER_SOURCES
	"${FFX_GPU_PATH}/fsr2/*.h"
	"${FFX_GPU_PATH}/fsr2/*.glsl"
	"${FFX_GPU_PATH}/fsr1/*.h"
    	"${FFX_GPU_PATH}/fsr1/*.glsl"
	"${FFX_GPU_PATH}/spd/*.h"
    	"${FFX_GPU_PATH}/spd/*.glsl"
    	"${FFX_GPU_PATH}/lpm/*.h"
    	"${FFX_GPU_PATH}/lpm/*.glsl"
	"${FFX_GPU_PATH}/cacao/*.h"
	"${FFX_GPU_PATH}/cacao/*.glsl"
    "${FFX_GPU_PATH}/cas/*.h"
    "${FFX_GPU_PATH}/cas/*.glsl"
    "${FFX_GPU_PATH}/lens/*.h"
    "${FFX_GPU_PATH}/lens/*.glsl"
	"${FFX_GPU_PATH}/parallelsort/*.h"
	"${FFX_GPU_PATH}/parallelsort/*.glsl"
    "${FFX_GPU_PATH}/denoiser/*.h"
    "${FFX_GPU_PATH}/denoiser/*.glsl"
	"${FFX_GPU_PATH}/classifier/*.h"
    "${FFX_GPU_PATH}/classifier/*.glsl"
	"${FFX_GPU_PATH}/sssr/*.h"
    "${FFX_GPU_PATH}/sssr/*.glsl"
	"${FFX_GPU_PATH}/denoiser/*.h"
    "${FFX_GPU_PATH}/denoiser/*.hlsl"
	)

file(GLOB_RECURSE PRIVATE_SHADERS
    "${CMAKE_CURRENT_SOURCE_DIR}/shaders/*.glsl")

file(GLOB PRIVATE_SOURCE
    "${FFX_SHARED_PATH}/ffx_assert.cpp"
	"${FFX_SRC_BACKENDS_PATH}/shared/*.h"
	"${FFX_SRC_BACKENDS_PATH}/shared/*.cpp"
	"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/"
	"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/"
    "${CMAKE_CURRENT_SOURCE_DIR}/*.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")

if (FFX_FSR OR FFX_ALL)
	set(FFX_FSR_PRIVATE_SOURCE
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_fsr1_shaderblobs.h"
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_fsr1_shaderblobs.cpp"
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_fsr2_shaderblobs.h"
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_fsr2_shaderblobs.cpp")
	list(APPEND PRIVATE_SOURCE ${FFX_FSR_PRIVATE_SOURCE})
endif()

if (FFX_SPD OR FFX_ALL)
	set(FFX_SPD_PRIVATE_SOURCE
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_spd_shaderblobs.h"
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_spd_shaderblobs.cpp")
	list(APPEND PRIVATE_SOURCE ${FFX_SPD_PRIVATE_SOURCE})
endif()

if (FFX_LPM OR FFX_ALL)
	set(FFX_LPM_PRIVATE_SOURCE
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_lpm_shaderblobs.h"
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_lpm_shaderblobs.cpp")
	list(APPEND PRIVATE_SOURCE ${FFX_LPM_PRIVATE_SOURCE})
endif()

if (FFX_BLUR OR FFX_ALL)
	set(FFX_BLUR_PRIVATE_SOURCE
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_blur_shaderblobs.h"
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_blur_shaderblobs.cpp")
	list(APPEND PRIVATE_SOURCE ${FFX_BLUR_PRIVATE_SOURCE})
endif()

if (FFX_CACAO OR FFX_ALL)
	set(FFX_CACAO_PRIVATE_SOURCE
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_cacao_shaderblobs.h"
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_cacao_shaderblobs.cpp")
	list(APPEND PRIVATE_SOURCE ${FFX_CACAO_PRIVATE_SOURCE})
endif()

if (FFX_VRS OR FFX_ALL)
	set(FFX_VRS_PRIVATE_SOURCE
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_vrs_shaderblobs.h"
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_vrs_shaderblobs.cpp")
	list(APPEND PRIVATE_SOURCE ${FFX_VRS_PRIVATE_SOURCE})
endif()

if (FFX_CAS OR FFX_ALL)
	set(FFX_CAS_PRIVATE_SOURCE
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_cas_shaderblobs.h"
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_cas_shaderblobs.cpp")
	list(APPEND PRIVATE_SOURCE ${FFX_CAS_PRIVATE_SOURCE})
endif()

if (FFX_DOF OR FFX_ALL)
	set(FFX_DOF_PRIVATE_SOURCE
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_dof_shaderblobs.h"
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_dof_shaderblobs.cpp")
	list(APPEND PRIVATE_SOURCE ${FFX_DOF_PRIVATE_SOURCE})
endif()

if (FFX_LENS OR FFX_ALL)
	set(FFX_LENS_PRIVATE_SOURCE
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_lens_shaderblobs.h"
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_lens_shaderblobs.cpp")
	list(APPEND PRIVATE_SOURCE ${FFX_LENS_PRIVATE_SOURCE})
endif()

if (FFX_PARALLEL_SORT OR FFX_ALL)
	set(FFX_PARALLEL_SORT_PRIVATE_SOURCE
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_parallelsort_shaderblobs.h"
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_parallelsort_shaderblobs.cpp")
	list(APPEND PRIVATE_SOURCE ${FFX_PARALLEL_SORT_PRIVATE_SOURCE})
endif()

if (FFX_DENOISER OR FFX_ALL)
	set(FFX_DENOISER_PRIVATE_SOURCE
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_denoiser_shaderblobs.h"
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_denoiser_shaderblobs.cpp")
	list(APPEND PRIVATE_SOURCE ${FFX_DENOISER_PRIVATE_SOURCE})
endif()

if (FFX_CLASSIFIER OR FFX_ALL)
	set(FFX_CLASSIFIER_PRIVATE_SOURCE
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_classifier_shaderblobs.h"
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_classifier_shaderblobs.cpp")
	list(APPEND PRIVATE_SOURCE ${FFX_CLASSIFIER_PRIVATE_SOURCE})
endif()

if (FFX_SSSR OR FFX_ALL)
	set(FFX_SSSR_PRIVATE_SOURCE
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_sssr_shaderblobs.h"
		"${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_sssr_shaderblobs.cpp")
	list(APPEND PRIVATE_SOURCE ${FFX_SSSR_PRIVATE_SOURCE})
endif()

if (FFX_CLASSIFIER OR FFX_ALL)
    set(FFX_CLASSIFIER_PRIVATE_SOURCE
        "${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_classifier_shaderblobs.h"
        "${FFX_SRC_BACKENDS_PATH}/shared/blob_accessors/ffx_classifier_shaderblobs.cpp")
    list(APPEND PRIVATE_SOURCE ${FFX_CLASSIFIER_PRIVATE_SOURCE})
endif()

file(GLOB_RECURSE PUBLIC_SOURCE
    "${FFX_HOST_BACKENDS_PATH}/vk/*.h")

if (FFX_BUILD_AS_DLL)
    add_library(ffx_backend_vk_${FFX_PLATFORM_NAME} SHARED ${PRIVATE_SOURCE} ${PUBLIC_SOURCE} ${PRIVATE_SHADERS} ${PUBLIC_SHADERS})
else()
    add_library(ffx_backend_vk_${FFX_PLATFORM_NAME} STATIC ${PRIVATE_SOURCE} ${PUBLIC_SOURCE} ${PRIVATE_SHADERS} ${PUBLIC_SHADERS})
endif()

# link in vk
target_link_libraries(ffx_backend_vk_${FFX_PLATFORM_NAME} "Vulkan::Vulkan")

# vk backend source
source_group("private_source"  FILES ${PRIVATE_SOURCE})
source_group("public_source"   FILES ${PUBLIC_SOURCE})
source_group("private_shaders" FILES ${PRIVATE_SHADERS})
source_group("public_shaders"  FILES ${PUBLIC_SHADERS})

get_filename_component(FFX_PASS_SHADER_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/../shaders/vk ABSOLUTE)

target_include_directories(ffx_backend_vk_${FFX_PLATFORM_NAME} PUBLIC ${FFX_INCLUDE_PATH})
target_include_directories(ffx_backend_vk_${FFX_PLATFORM_NAME} PUBLIC ${FFX_PASS_SHADER_OUTPUT_PATH})
target_include_directories(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE ${FFX_COMPONENTS_PATH})
target_include_directories(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE ${FFX_SHARED_PATH})
target_include_directories(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE "${FFX_SRC_BACKENDS_PATH}/shared")
target_include_directories(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE ${FFX_PASS_SHADER_OUTPUT_PATH})

set_source_files_properties(${PRIVATE_SHADERS} PROPERTIES HEADER_FILE_ONLY TRUE)
set_source_files_properties(${PUBLIC_SHADERS} PROPERTIES HEADER_FILE_ONLY TRUE)

file(MAKE_DIRECTORY ${FFX_PASS_SHADER_OUTPUT_PATH})

if (FFX_AUTO_COMPILE_SHADERS)
    set(FFX_SC_DEPENDENT_TARGET ffx_backend_vk_${FFX_PLATFORM_NAME})
else()
    set(FFX_SC_DEPENDENT_TARGET ffx_backend_vk_shaders_${FFX_PLATFORM_NAME})
    add_custom_target(${FFX_SC_DEPENDENT_TARGET})
endif()

if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.20.0")
	cmake_policy(SET CMP0116 OLD)
endif()

# add pass shaders for all the components
if (FFX_FSR OR FFX_ALL)
	target_compile_definitions(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE FFX_FSR)
	include (CMakeShadersFSR2.txt)
	include (CMakeShadersFSR1.txt)
endif()

if (FFX_SPD OR FFX_ALL)
	target_compile_definitions(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE FFX_SPD)
	include (CMakeShadersSPD.txt)
endif()

if (FFX_LPM OR FFX_ALL)
target_compile_definitions(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE FFX_LPM)
	include (CMakeShadersLPM.txt)
endif()

if (FFX_BLUR OR FFX_ALL)
	target_compile_definitions(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE FFX_BLUR)
	include (CMakeShadersBLUR.txt)
endif()

if (FFX_CACAO OR FFX_ALL)
	target_compile_definitions(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE FFX_CACAO)
	include (CMakeShadersCACAO.txt)
endif()

if (FFX_VRS OR FFX_ALL)
	target_compile_definitions(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE FFX_VRS)
	include (CMakeShadersVRS.txt)
endif()

if (FFX_CAS OR FFX_ALL)
	target_compile_definitions(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE FFX_CAS)
	include (CMakeShadersCAS.txt)
endif()

if (FFX_DOF OR FFX_ALL)
	target_compile_definitions(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE FFX_DOF)
	include (CMakeShadersDOF.txt)
endif()

if (FFX_LENS OR FFX_ALL)
	target_compile_definitions(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE FFX_LENS)
	include (CMakeShadersLENS.txt)
endif()

if (FFX_PARALLEL_SORT OR FFX_ALL)
	target_compile_definitions(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE FFX_PARALLEL_SORT)
	include (CMakeShadersParallelSort.txt)
endif()

if (FFX_DENOISER OR FFX_ALL)
	target_compile_definitions(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE FFX_DENOISER)
	include (CMakeShadersDenoiser.txt)
endif()

if (FFX_CLASSIFIER OR FFX_ALL)
	target_compile_definitions(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE FFX_CLASSIFIER)
	include (CMakeShadersClassifier.txt)
endif()

if (FFX_SSSR OR FFX_ALL)
	target_compile_definitions(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE FFX_SSSR)
	include (CMakeShadersSSSR.txt)
endif()

if (FFX_CLASSIFIER OR FFX_ALL)
    target_compile_definitions(ffx_backend_vk_${FFX_PLATFORM_NAME} PRIVATE FFX_CLASSIFIER)
    include (CMakeShadersClassifier.txt)
endif()

add_custom_target(ffx_shader_permutations_vk DEPENDS ${FFX_SC_PERMUTATION_OUTPUTS})
add_dependencies(${FFX_SC_DEPENDENT_TARGET} ffx_shader_permutations_vk)

# Make sure shader builds are a dependency of the backend
add_dependencies(ffx_backend_vk_${FFX_PLATFORM_NAME} ffx_shader_permutations_vk)

# Add to solution folder.
set_target_properties(ffx_backend_vk_${FFX_PLATFORM_NAME} PROPERTIES FOLDER Backends)
set_target_properties(ffx_shader_permutations_vk PROPERTIES FOLDER Backends)
